#                     Even Fibonacci numbers
#
# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
#
#               1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.
#
#                         Answer: 4613732


from typing import Callable


def fibonacci_numbers(
    limit: int,
    condition: Callable[[int], bool] = lambda _: True,
) -> list[int]:
    fib_a, fib_b, fib_c = 1, 2, 0
    fibonacci = [fib for fib in [fib_a, fib_b] if condition(fib)]

    while (fib_c := fib_a + fib_b) < limit:
        if condition(fib_c):
            fibonacci.append(fib_c)

        fib_a, fib_b = fib_b, fib_c

    return fibonacci


def sum_even_fibonacci_numbers(
    limit: int,
) -> int:
    return sum(
        fibonacci_numbers(
            limit,
            lambda item: 0 == item % 2,
        )
    )
