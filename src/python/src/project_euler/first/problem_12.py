#                        Highly divisible triangular number
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So  the  7th  triangle  number  would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
# first ten terms would be:
#
#                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#                             1: 1
#                             3: 1,3
#                             6: 1,2,3,6
#                            10: 1,2,5,10
#                            15: 1,3,5,15
#                            21: 1,3,7,21
#                            28: 1,2,4,7,14,28
#
# We  can see that 28 is the first triangle number to have over five divisors.
# What  is  the  value  of the first triangle number to have over five hundred
# divisors?
#
#                            Answer: 76576500
#

from project_euler.project_euler import all_divisors


def highly_divisible_triangular(
    lower_bound: int,
) -> int:
    """Find the first triangular number that has more than the specified number of divisors.

    A triangular number is a number that is the sum of all natural numbers up to some n.
    For example, the 7th triangular number is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

    Args:
        lower_bound: The minimum number of divisors the triangular number should have

    Returns:
        The first triangular number that has more than lower_bound divisors

    Example:
        >>> highly_divisible_triangular(5)
        28  # 28 has 6 divisors: 1,2,4,7,14,28
    """
    triangular_numbers = [1]
    add = 1

    while len(all_divisors(triangular_numbers[-1])) < lower_bound:
        add += 1
        triangular_numbers.append(triangular_numbers[-1] + add)

    return triangular_numbers[-1]
